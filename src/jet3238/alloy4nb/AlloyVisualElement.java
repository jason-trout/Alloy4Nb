/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jet3238.alloy4nb;

import edu.mit.csail.sdg.alloy4.A4Reporter;
import edu.mit.csail.sdg.alloy4.Err;
import edu.mit.csail.sdg.alloy4compiler.ast.Command;
import edu.mit.csail.sdg.alloy4compiler.ast.Module;
import edu.mit.csail.sdg.alloy4compiler.ast.Sig;
import edu.mit.csail.sdg.alloy4compiler.ast.Sig.Field;
import edu.mit.csail.sdg.alloy4compiler.parser.CompUtil;
import edu.mit.csail.sdg.alloy4compiler.translator.A4Options;
import edu.mit.csail.sdg.alloy4compiler.translator.A4Solution;
import edu.mit.csail.sdg.alloy4compiler.translator.A4Tuple;
import edu.mit.csail.sdg.alloy4compiler.translator.TranslateAlloyToKodkod;
import edu.mit.csail.sdg.alloy4viz.VizGUI;
import java.io.File;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JToolBar;
import org.netbeans.core.spi.multiview.CloseOperationState;
import org.netbeans.core.spi.multiview.MultiViewElement;
import org.netbeans.core.spi.multiview.MultiViewElementCallback;
import org.openide.awt.UndoRedo;
import org.openide.util.Lookup;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

@MultiViewElement.Registration(
  displayName = "#LBL_Alloy_VISUAL",
  iconBase = "jet3238/alloy4nb/alloy.gif",
  mimeType = "text/x-alloy",
  persistenceType = TopComponent.PERSISTENCE_NEVER,
  preferredID = "AlloyVisual",
  position = 2000
)
@Messages("LBL_Alloy_VISUAL=Visual")
public final class AlloyVisualElement extends JPanel implements MultiViewElement {

  private AlloyDataObject obj;
  private JToolBar toolbar = new JToolBar();
  private transient MultiViewElementCallback callback;
  private VizGUI viz;
  private List<A4Solution> solutions = new ArrayList<A4Solution>();
  private int currSolutionIdx;

  public AlloyVisualElement(Lookup lkp) {
    obj = lkp.lookup(AlloyDataObject.class);
    assert obj != null;
    initComponents();
  }

  @Override
  public String getName() {
    return "AlloyVisualElement";
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    solutionLbl = new javax.swing.JLabel();
    visualizeBtn = new javax.swing.JButton();
    genSrcBtn = new javax.swing.JButton();
    nextBtn = new javax.swing.JButton();
    prevBtn = new javax.swing.JButton();

    solutionLbl.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    org.openide.awt.Mnemonics.setLocalizedText(solutionLbl, org.openide.util.NbBundle.getMessage(AlloyVisualElement.class, "AlloyVisualElement.solutionLbl.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(visualizeBtn, org.openide.util.NbBundle.getMessage(AlloyVisualElement.class, "AlloyVisualElement.visualizeBtn.text")); // NOI18N
    visualizeBtn.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        visualizeBtnActionPerformed(evt);
      }
    });

    org.openide.awt.Mnemonics.setLocalizedText(genSrcBtn, org.openide.util.NbBundle.getMessage(AlloyVisualElement.class, "AlloyVisualElement.genSrcBtn.text")); // NOI18N
    genSrcBtn.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        genSrcBtnActionPerformed(evt);
      }
    });

    org.openide.awt.Mnemonics.setLocalizedText(nextBtn, org.openide.util.NbBundle.getMessage(AlloyVisualElement.class, "AlloyVisualElement.nextBtn.text")); // NOI18N
    nextBtn.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        nextBtnActionPerformed(evt);
      }
    });

    org.openide.awt.Mnemonics.setLocalizedText(prevBtn, org.openide.util.NbBundle.getMessage(AlloyVisualElement.class, "AlloyVisualElement.prevBtn.text")); // NOI18N
    prevBtn.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        prevBtnActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
          .addComponent(solutionLbl)
          .addGroup(layout.createSequentialGroup()
            .addComponent(prevBtn)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
            .addComponent(nextBtn))
          .addComponent(visualizeBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(genSrcBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addContainerGap(203, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(solutionLbl)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(visualizeBtn)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(genSrcBtn)
        .addGap(73, 73, 73)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(nextBtn)
          .addComponent(prevBtn))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents

  private void updateButtonState() {
    if (currSolutionIdx == 0) {
      prevBtn.setEnabled(false);
    } else {
      prevBtn.setEnabled(true);
    }
    if (solutions.size() == 0 || currSolutionIdx == solutions.size() - 1) {
      nextBtn.setEnabled(false);
    } else {
      nextBtn.setEnabled(true);
    }
    if (solutions.size() == 0) {
      visualizeBtn.setText("Visualize Unavailable");
      visualizeBtn.setEnabled(false);
      genSrcBtn.setText("Generate Source Unavailable");
      genSrcBtn.setEnabled(false);
    } else {
      visualizeBtn.setText("Visualize Solution");
      visualizeBtn.setEnabled(true);
      genSrcBtn.setText("Generate Source for Solution");
      genSrcBtn.setEnabled(true);
    }
  }

  private void visualizeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_visualizeBtnActionPerformed
    try {
      A4Solution solution = solutions.get(currSolutionIdx);
      String xmlPath = "alloy-solution-" + currSolutionIdx + ".xml";
      if (solution != null) {
        solution.writeXML(xmlPath);
        if (viz == null) {
          viz = new VizGUI(false, xmlPath, null);
        } else {
          viz.loadXML(xmlPath, true);
        }
      }
    } catch (Exception ex) {
      ex.printStackTrace();
    }
  }//GEN-LAST:event_visualizeBtnActionPerformed

  private void prevBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevBtnActionPerformed
    currSolutionIdx--;
    solutionLbl.setText("Solution " + (currSolutionIdx + 1) + " of " + solutions.size() + ".");
    updateButtonState();
  }//GEN-LAST:event_prevBtnActionPerformed

  private void nextBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextBtnActionPerformed
    currSolutionIdx++;
    solutionLbl.setText("Solution " + (currSolutionIdx + 1) + " of " + solutions.size() + ".");
    updateButtonState();
  }//GEN-LAST:event_nextBtnActionPerformed

  private void genSrcBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genSrcBtnActionPerformed
    try {
      String name = obj.getName();
      String path = obj.getPrimaryFile().getPath();
      String pathWithoutFile = path.substring(0, path.lastIndexOf("/"));
      String pkgName = pathWithoutFile.substring(pathWithoutFile.lastIndexOf("/src/") + "/src/".length()).replace("/", ".");
      String alloyGenPkgName = pkgName + ".alloygen." + name;
      String alloyGenPath = Paths.get(pathWithoutFile.replace(pkgName.replace(".", "/"), ""), alloyGenPkgName.replace(".", "/")).toString();
     
      new File(alloyGenPath).delete();
      
      new File(alloyGenPath).mkdirs();
      
      A4Solution solution = solutions.get(currSolutionIdx);
      
      if (solution == null) {
        return;
      }
      
      generateDomainObjects(currSolutionIdx, alloyGenPkgName, alloyGenPath);
      generateInstance(currSolutionIdx, alloyGenPkgName, alloyGenPath);
      
    } catch (Exception ex) {
      ex.printStackTrace();
    }
  }//GEN-LAST:event_genSrcBtnActionPerformed

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton genSrcBtn;
  private javax.swing.JButton nextBtn;
  private javax.swing.JButton prevBtn;
  private javax.swing.JLabel solutionLbl;
  private javax.swing.JButton visualizeBtn;
  // End of variables declaration//GEN-END:variables
  @Override
  public JComponent getVisualRepresentation() {

    return this;
  }

  @Override
  public JComponent getToolbarRepresentation() {
    return toolbar;
  }

  @Override
  public Action[] getActions() {
    return new Action[0];
  }

  @Override
  public Lookup getLookup() {
    return obj.getLookup();
  }

  @Override
  public void componentOpened() {
  }

  @Override
  public void componentClosed() {
  }

  @Override
  public void componentShowing() {

    currSolutionIdx = 0;
    solutions.clear();

    try {

      String filename = obj.getPrimaryFile().getPath();

      A4Reporter rep = new A4Reporter();

      // Parse+typecheck the model
      System.out.println("=========== Parsing+Typechecking " + filename + " =============");
      Module world = CompUtil.parseEverything_fromFile(rep, null, filename);

      // Set options for how to execute the command
      A4Options options = new A4Options();
      options.solver = A4Options.SatSolver.SAT4J;
      Command command = world.getAllCommands().get(0);
      System.out.println("============ Command " + command + ": ============");

      // generate and store all solutions
      int count = findAllSols(rep, world, options, command, solutions);

      currSolutionIdx = 0;
      visualizeBtn.setEnabled(true);
      genSrcBtn.setEnabled(true);
      updateButtonState();
      solutionLbl.setText("Solution " + (currSolutionIdx + 1) + " of " + solutions.size() + ".");

    } catch (Exception ex) {
      solutions.clear();
      currSolutionIdx = 0;
      updateButtonState();
      solutionLbl.setText("No solutions found.");

      ex.printStackTrace();
    }
  }

  @Override
  public void componentHidden() {
  }

  @Override
  public void componentActivated() {
  }

  @Override
  public void componentDeactivated() {
  }

  @Override
  public UndoRedo getUndoRedo() {
    return UndoRedo.NONE;
  }

  @Override
  public void setMultiViewCallback(MultiViewElementCallback callback) {
    this.callback = callback;
  }

  @Override
  public CloseOperationState canCloseElement() {
    return CloseOperationState.STATE_OK;
  }

  private int findAllSols(A4Reporter rep, Module world,
    A4Options options, Command command, List<A4Solution> allSols) throws Err {
    A4Solution solution;
    solution = TranslateAlloyToKodkod.execute_command(rep, world.getAllSigs(), command, options);
    do {
      if (solution != null) {
        allSols.add(solution);
      }
      solution = solution.next();
    } while (solution != solution.next());
    return allSols.size();
  }

  private String getFieldName(Field field) {
    return field.label;
  }

  private String getFieldType(Field field) {
    String fieldName = getFieldName(field);
    String fieldType = "";
    for (int idx = 0; idx < field.decl().names.size(); idx++) {
      String nameStr = field.decl().names.get(idx).toString();
      if (nameStr.endsWith(fieldName + ")")) {
        String typeStr = field.decl().names.get(idx).type().toString();
        fieldType = typeStr.substring(typeStr.indexOf("->") + "->".length()).replace("this/", "").replace("}", "");
        fieldType = fieldType.replace("Int", "int");
        break;
      }
    }
    return fieldType;
  }

  private void generateDomainObjects(int solutionIdx, String alloyGenPkgName, String path) {
    try {
      A4Solution solution = solutions.get(solutionIdx);

      if (solution == null) {
        return;
      }
      for (Sig sig : solution.getAllReachableSigs()) {
        String label = sig.label;
        if (label.startsWith("this/")) {
          StringBuilder sb = new StringBuilder();
          String className = label.replace("this/", "");
          sb.append("package " + alloyGenPkgName + ";\n\n");
          sb.append("class ");
          sb.append(className);
          sb.append(" {\n");

          sb.append("\n");

          for (Field field : sig.getFields()) {
            String fieldName = getFieldName(field);
            String fieldType = getFieldType(field);
            sb.append("  private ").append(fieldType).append(" ").append(fieldName).append(";\n");
          }

          sb.append("\n");

          for (Field field : sig.getFields()) {
            String fieldName = getFieldName(field);
            String fieldType = getFieldType(field);
            sb.append("  public ").append(fieldType).append(" get").append(fieldName).append("() {\n");
            sb.append("    return ").append(fieldName).append(";\n");
            sb.append("  }\n");
            sb.append("  public void set").append(fieldName).append("(").append(fieldType).append(" ").append(fieldName).append(") {\n");
            sb.append("    this.").append(fieldName).append(" = ").append(fieldName).append(";\n");
            sb.append("  }\n");
            sb.append("\n");
          }
          sb.append("}\n");

          try (PrintWriter out = new PrintWriter(Paths.get(path, className + ".java").toString())) {
            out.println(sb.toString());
          }

        }
      }
    } catch (Exception ex) {
      ex.printStackTrace();
    }
  }

  private void generateInstance(int solutionIdx, String alloyGenPkgName, String path) {
    try {

      A4Solution solution = solutions.get(solutionIdx);

      if (solution == null) {
        return;
      }

      StringBuilder sb = new StringBuilder();
      
      
      sb.append("package " + alloyGenPkgName + ";\n\n");
      sb.append("class Solution").append(solutionIdx + 1).append("{\n");
      sb.append("  public static void main(String args[]) {\n");

      for (Sig sig : solution.getAllReachableSigs()) {
        if (!sig.builtin) {
          Iterator<A4Tuple> sigTupleIter = solution.eval(sig).iterator();
          while (sigTupleIter.hasNext()) {
            A4Tuple sigTuple = sigTupleIter.next();
            for (int idx = 0; idx < sigTuple.arity(); idx++) {
              String sigAtom = sigTuple.atom(idx);
              String sigType = sigAtom.substring(0, sigAtom.indexOf("$"));
              String sigVarName = sigAtom.replace("$", "").toLowerCase();
              sb.append("    ").append(sigType).append(" ").append(sigVarName).append(" = new ").append(sigType).append("();\n");
            }
          }
        }
      }


      for (Sig sig : solution.getAllReachableSigs()) {
        if (!sig.builtin) {
          for (Field field : sig.getFields()) {
            String fieldName = getFieldName(field);
            Iterator<A4Tuple> fieldTupleIter = solution.eval(field).iterator();
            while (fieldTupleIter.hasNext()) {
              A4Tuple fieldTuple = fieldTupleIter.next();
              if (fieldTuple.arity() == 2) {
                String varName1 = fieldTuple.atom(0).replace("$", "").toLowerCase();
                String varName2 = fieldTuple.atom(1).replace("$", "").toLowerCase();
                sb.append("    ").append(varName1).append(".").append("set").append(fieldName).append("(").append(varName2).append(");\n");
              }
            }
          }

        }
      }
      sb.append("  }\n");
      sb.append("}\n");
      try (PrintWriter out = new PrintWriter(Paths.get(path, "Solution" + (solutionIdx + 1) + ".java").toString())) {
        out.println(sb.toString());
      }
    } catch (Exception ex) {
      ex.printStackTrace();
    }
  }
}
